#include <iostream>
#include <queue>
using namespace std;
void func(int n, int a[100][100], int start, int dist[], int parent[])
{
    queue<int> q;
    q.push(start);
    dist[start] = 0;
    parent[start] = -1;
    while (!q.empty())
    {
        int u = q.front();
        q.pop();
        for (int v = 0; v < n; v++)
        {
            if (a[u][v] && dist[v] == -1)
            {
                q.push(v);
                dist[v] = dist[u] + 1;
                parent[v] = u;
            }
        }
    }
}
void print(int finish,  int dist[], const int parent[])
{
    cout << dist[finish] << endl;
    int path[100], path_size = 0;
    for (int v = finish; v != -1; v = parent[v])
    {
        path[path_size++] = v;
    }
    for (int i = path_size - 1; i >= 0; i--)
    {
        cout << path[i] + 1 << " ";
    }
    cout << endl;
}
int main()
{
    int n, dist[100], parent[100];
    int start, finish;
    int a[100][100];
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> a[i][j];
        }
    }
    cin >> start >> finish;
    start--, finish--;
    for(int i = 0; i < n; i++)
    {
        dist[i] = -1;
        parent[i] = -1;
    }
    func(n, a, start, dist, parent);
    print(finish, dist, parent);

    return 0;
}
